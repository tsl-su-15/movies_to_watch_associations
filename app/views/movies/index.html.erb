<div class="page-header">
  <h1>
    Movies
    <%= link_to new_movie_url, :class => "btn btn-lg btn-success" do %>
      <i class="fa fa-plus"></i>
    <% end  %>
  </h1>
</div>

<!-- Responsive, Isotope-based layout example -->

<div class="row">
  <div class="col-xs-12">
    <input type="text" id="quicksearch" placeholder="Search Movies (start typing)" class="form-control">
  </div>
</div>

<hr>

<div class="row isotope-container">
<% @movies.each do |movie| %>
  <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 isotope-item">
    <div class="panel panel-default">
      <div class="panel-heading">
        <h3 class="panel-title">
          <%= movie.title %> - <%= movie.year %>
        </h3>
      </div>
      <div class="panel-body">
        <dl>
          <dt>Duration</dt>
          <dd><%= movie.duration %></dd>

          <dt>Description</dt>
          <dd><%= movie.description %></dd>

          <dt>Image url</dt>
          <dd><%= link_to image_tag(movie.image_url), movie_path(movie.id) %></dd>

          <dt>Director</dt>
          <dd><%= link_to movie.director.name, director_path(movie.director.id) %></dd>

        </dl>
        <% if user_signed_in? %>
          <% watchlist_item = WatchlistItem.where(movie_id: movie.id, user_id: current_user.id).first %>
          <% if watchlist_item %>
            <%= link_to watchlist_item_path(watchlist_item), method: :delete, class: 'btn btn-danger' do %>
              <i class="fa fa-times"></i> Remove from watch list
            <% end %>
            <% if watchlist_item.watched == true %>
              <%= link_to unwatch_watchlist_item_path(watchlist_item), method: :patch, class: 'btn btn-warning movie-panel-button' do %>
                <i class="fa fa-times"></i> Mark as unwatched
              <% end %>
            <% else %>
              <%= form_tag watch_watchlist_item_path, class: 'movie-panel-button' do %>
                <input type="hidden" value="<%= current_user.id %>" name="user_id">
                <input type="hidden" value="<%= movie.id %>" name="movie_id">
                <button class="btn btn-success">
                  <i class="fa fa-check"></i> Mark as watched
                </button>
              <% end %>
            <% end %>
          <% else %>
            <%= form_tag watchlist_items_path do %>
              <input type="hidden" value="<%= current_user.id %>" name="user_id">
              <input type="hidden" value="<%= movie.id %>" name="movie_id">
              <button class="btn btn-success">
                <i class="fa fa-plus"></i> Add to watch list
              </button>
            <% end %>
            <%= form_tag watch_watchlist_item_path, class: 'movie-panel-button' do %>
              <input type="hidden" value="<%= current_user.id %>" name="user_id">
              <input type="hidden" value="<%= movie.id %>" name="movie_id">
              <button class="btn btn-success">
                <i class="fa fa-check"></i> Mark as watched
              </button>
            <% end %>
          <% end %>
        <% end %>
      </div>
    </div>
  </div>
<% end %>
</div>

<!-- JavaScript for Isotope layout and quicksearch -->
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery.imagesloaded/3.1.8/imagesloaded.pkgd.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery.isotope/2.0.0/isotope.pkgd.min.js"></script>
<script>
  $(function() {
    // quick search regex
    var qsRegex;
    // init Isotope
    var $container = $('.isotope-container');
    $container.imagesLoaded(function() {
      $container.isotope({
        itemSelector: '.isotope-item',
        layoutMode: 'masonry',
        filter: function() {
          return qsRegex ? $(this).text().match( qsRegex ) : true;
        }
      })
    });
    // use value of search field to filter
    var $quicksearch = $('#quicksearch').keyup( debounce( function() {
      qsRegex = new RegExp( $quicksearch.val(), 'gi' );
      $container.isotope();
    }, 200 ) );
  });
  // debounce so filtering doesn't happen every millisecond
  function debounce( fn, threshold ) {
    var timeout;
    return function debounced() {
      if ( timeout ) {
        clearTimeout( timeout );
      }
      function delayed() {
        fn();
        timeout = null;
      }
      timeout = setTimeout( delayed, threshold || 100 );
    }
  }
</script>

<!-- End responsive, Isotope-based layout example -->
